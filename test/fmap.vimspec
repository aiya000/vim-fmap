Describe fmap.vim
  Before all
    let V = vital#fmap#new()

    let List = V.import('Data.List')

    call InitializeEnv()
  End

  Describe <Plug>(fmap-*)
    It gets an f-mapped key
      Assert Equals(fmap#shot(',', 'f'), 'f、')
      Assert Equals(fmap#shot('.', 'f'), 'f。')
    End

    It escapes with an invalid key stroke
      Assert Equals(fmap#shot(v:null, 'f'), '')
    End
  End

  Describe :FNoreMap
    It adds a new f-mapping with newer .target
      FNoreMap x ＄
      Assert List.has(g:fmap_mappings, {'strokes': ['x'], 'target': '＄'})
    End

    It adds a stroke of the f-mapping's to g:fmap_mappings with already existent .target
      FNoreMap o 。
      let added_mapping = List.find(g:fmap_mappings, v:null, { fmap_mapping ->
            \ fmap_mapping.target ==# '。'
            \ })

      Assert
            \ List.has(added_mapping.strokes, '.') &&
            \ List.has(added_mapping.strokes, 'o')
    End
  End
End
